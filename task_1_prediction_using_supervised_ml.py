# -*- coding: utf-8 -*-
"""Task 1: Prediction using Supervised ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nREHDXXaUR0K8pi1kasDcTOth_x4JB5x

# Task 1: Prediction using Supervised ML
(Level - Beginner)

Aim: Predict the percentage of an student based on the no. of study hours.

Question: What will be predicted score if a student studies for 9.25 hrs/ day?

Dataset: http://bit.ly/w-data

# Importing all necessary librarie
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
print("All libraries are imported")

"""# Importing Dataset"""

data=pd.read_csv("http://bit.ly/w-data")
print("Dataset imported")
data.head()

"""# Summarizing Dataset"""

data.describe()

data.shape

data.info()

"""# Visualizing data"""

sns.set_style('darkgrid')
sns.scatterplot(x=data['Hours'],y=data['Scores'],color='orange',s=80)
plt.title("Hours vs Percentage",size=20)
plt.xlabel("Hours of study",size=14)
plt.ylabel("Marks Percentage",size=14)
plt.show()

sns.regplot(x=data["Hours"],y=data["Scores"])
plt.title("Regression Plot",size=20)
plt.xlabel("Hours of study",size=14)
plt.ylabel(" Marks Percentage",size=14)
plt.show()

data.corr()

"""The above table shows that two variables are positively connected.

# Training the model

Segregating data into X and Y (Independent and Dependent varaiable)
"""

x=data.iloc[ :, : -1].values
y=data.iloc[ :, 1].values

"""Splitting data into Train and Test Data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""Training The Model"""

model=LinearRegression()
model.fit(x_train,y_train)
print('Model training completed')

"""# Calculating and Plotting Regression Line"""

m=model.coef_
n=model.intercept_
line=m*x+n
print("Slope: ",m)
print("intercept: ",n)

plt.scatter(x,y)
plt.plot(x,line,color="red")
plt.show()

"""Model Scores"""

print("Training Score: ",model.score(x_train,y_train))
print("Test Score: ",model.score(x_test,y_test))

"""# Predictions"""

y_pred=model.predict(x_test)
print(y_pred)

"""# Comparing Actual and Predicted Values"""

data=pd.DataFrame({'Actual':y_test,'Predicted':y_pred,'Difference':y_test-y_pred})
data

"""# Testing the Model"""

SH=float(input("Enter no.of hours studed: "))
Study_hours= [[SH]]
result=model.predict(Study_hours)
print("If the student studies for {0} hours, he may receive a score of {1}%.".format(Study_hours,result))

"""# Evaluating the model"""

print('Mean absolute error',mean_absolute_error(y_test,y_pred))